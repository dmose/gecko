/* fluent@0.6.4 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define('fluent', ['exports'], factory) :
	(factory((global.Fluent = {})));
}(this, (function (exports) { 'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var asyncIterator = function (iterable) {
  if (typeof Symbol === "function") {
    if (Symbol.asyncIterator) {
      var method = iterable[Symbol.asyncIterator];
      if (method != null) return method.call(iterable);
    }

    if (Symbol.iterator) {
      return iterable[Symbol.iterator]();
    }
  }

  throw new TypeError("Object is not async iterable");
};

var asyncToGenerator = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/*  eslint no-magic-numbers: [0]  */

var MAX_PLACEABLES = 100;

var entryIdentifierRe = new RegExp("-?[a-zA-Z][a-zA-Z0-9_-]*", "y");
var identifierRe = new RegExp("[a-zA-Z][a-zA-Z0-9_-]*", "y");
var functionIdentifierRe = /^[A-Z][A-Z_?-]*$/;

/**
 * The `Parser` class is responsible for parsing FTL resources.
 *
 * It's only public method is `getResource(source)` which takes an FTL string
 * and returns a two element Array with an Object of entries generated from the
 * source as the first element and an array of SyntaxError objects as the
 * second.
 *
 * This parser is optimized for runtime performance.
 *
 * There is an equivalent of this parser in syntax/parser which is
 * generating full AST which is useful for FTL tools.
 */

var RuntimeParser = function () {
  function RuntimeParser() {
    classCallCheck(this, RuntimeParser);
  }

  createClass(RuntimeParser, [{
    key: "getResource",

    /**
     * Parse FTL code into entries formattable by the MessageContext.
     *
     * Given a string of FTL syntax, return a map of entries that can be passed
     * to MessageContext.format and a list of errors encountered during parsing.
     *
     * @param {String} string
     * @returns {Array<Object, Array>}
     */
    value: function getResource(string) {
      this._source = string;
      this._index = 0;
      this._length = string.length;
      this.entries = {};

      var errors = [];

      this.skipWS();
      while (this._index < this._length) {
        try {
          this.getEntry();
        } catch (e) {
          if (e instanceof SyntaxError) {
            errors.push(e);

            this.skipToNextEntryStart();
          } else {
            throw e;
          }
        }
        this.skipWS();
      }

      return [this.entries, errors];
    }

    /**
     * Parse the source string from the current index as an FTL entry
     * and add it to object's entries property.
     *
     * @private
     */

  }, {
    key: "getEntry",
    value: function getEntry() {
      // The index here should either be at the beginning of the file
      // or right after new line.
      if (this._index !== 0 && this._source[this._index - 1] !== "\n") {
        throw this.error("Expected an entry to start\n        at the beginning of the file or on a new line.");
      }

      var ch = this._source[this._index];

      // We don't care about comments or sections at runtime
      if (ch === "/" || ch === "#" && [" ", "#", "\n"].includes(this._source[this._index + 1])) {
        this.skipComment();
        return;
      }

      if (ch === "[") {
        this.skipSection();
        return;
      }

      this.getMessage();
    }

    /**
     * Skip the section entry from the current index.
     *
     * @private
     */

  }, {
    key: "skipSection",
    value: function skipSection() {
      this._index += 1;
      if (this._source[this._index] !== "[") {
        throw this.error('Expected "[[" to open a section');
      }

      this._index += 1;

      this.skipInlineWS();
      this.getVariantName();
      this.skipInlineWS();

      if (this._source[this._index] !== "]" || this._source[this._index + 1] !== "]") {
        throw this.error('Expected "]]" to close a section');
      }

      this._index += 2;
    }

    /**
     * Parse the source string from the current index as an FTL message
     * and add it to the entries property on the Parser.
     *
     * @private
     */

  }, {
    key: "getMessage",
    value: function getMessage() {
      var id = this.getEntryIdentifier();

      this.skipInlineWS();

      if (this._source[this._index] === "=") {
        this._index++;
      }

      this.skipInlineWS();

      var val = this.getPattern();

      if (id.startsWith("-") && val === null) {
        throw this.error("Expected term to have a value");
      }

      var attrs = null;

      if (this._source[this._index] === " ") {
        var lineStart = this._index;
        this.skipInlineWS();

        if (this._source[this._index] === ".") {
          this._index = lineStart;
          attrs = this.getAttributes();
        }
      }

      if (attrs === null && typeof val === "string") {
        this.entries[id] = val;
      } else {
        if (val === null && attrs === null) {
          throw this.error("Expected message to have a value or attributes");
        }

        this.entries[id] = {};

        if (val !== null) {
          this.entries[id].val = val;
        }

        if (attrs !== null) {
          this.entries[id].attrs = attrs;
        }
      }
    }

    /**
     * Skip whitespace.
     *
     * @private
     */

  }, {
    key: "skipWS",
    value: function skipWS() {
      var ch = this._source[this._index];
      while (ch === " " || ch === "\n" || ch === "\t" || ch === "\r") {
        ch = this._source[++this._index];
      }
    }

    /**
     * Skip inline whitespace (space and \t).
     *
     * @private
     */

  }, {
    key: "skipInlineWS",
    value: function skipInlineWS() {
      var ch = this._source[this._index];
      while (ch === " " || ch === "\t") {
        ch = this._source[++this._index];
      }
    }

    /**
     * Skip blank lines.
     *
     * @private
     */

  }, {
    key: "skipBlankLines",
    value: function skipBlankLines() {
      while (true) {
        var ptr = this._index;

        this.skipInlineWS();

        if (this._source[this._index] === "\n") {
          this._index += 1;
        } else {
          this._index = ptr;
          break;
        }
      }
    }

    /**
     * Get identifier using the provided regex.
     *
     * By default this will get identifiers of public messages, attributes and
     * external arguments (without the $).
     *
     * @returns {String}
     * @private
     */

  }, {
    key: "getIdentifier",
    value: function getIdentifier() {
      var re = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : identifierRe;

      re.lastIndex = this._index;
      var result = re.exec(this._source);

      if (result === null) {
        this._index += 1;
        throw this.error("Expected an identifier [" + re.toString() + "]");
      }

      this._index = re.lastIndex;
      return result[0];
    }

    /**
     * Get identifier of a Message or a Term (staring with a dash).
     *
     * @returns {String}
     * @private
     */

  }, {
    key: "getEntryIdentifier",
    value: function getEntryIdentifier() {
      return this.getIdentifier(entryIdentifierRe);
    }

    /**
     * Get Variant name.
     *
     * @returns {Object}
     * @private
     */

  }, {
    key: "getVariantName",
    value: function getVariantName() {
      var name = "";

      var start = this._index;
      var cc = this._source.charCodeAt(this._index);

      if (cc >= 97 && cc <= 122 || // a-z
      cc >= 65 && cc <= 90 || // A-Z
      cc === 95 || cc === 32) {
        // _ <space>
        cc = this._source.charCodeAt(++this._index);
      } else {
        throw this.error("Expected a keyword (starting with [a-zA-Z_])");
      }

      while (cc >= 97 && cc <= 122 || // a-z
      cc >= 65 && cc <= 90 || // A-Z
      cc >= 48 && cc <= 57 || // 0-9
      cc === 95 || cc === 45 || cc === 32) {
        // _- <space>
        cc = this._source.charCodeAt(++this._index);
      }

      // If we encountered the end of name, we want to test if the last
      // collected character is a space.
      // If it is, we will backtrack to the last non-space character because
      // the keyword cannot end with a space character.
      while (this._source.charCodeAt(this._index - 1) === 32) {
        this._index--;
      }

      name += this._source.slice(start, this._index);

      return { type: "varname", name: name };
    }

    /**
     * Get simple string argument enclosed in `"`.
     *
     * @returns {String}
     * @private
     */

  }, {
    key: "getString",
    value: function getString() {
      var start = this._index + 1;

      while (++this._index < this._length) {
        var ch = this._source[this._index];

        if (ch === '"') {
          break;
        }

        if (ch === "\n") {
          throw this.error("Unterminated string expression");
        }
      }

      return this._source.substring(start, this._index++);
    }

    /**
     * Parses a Message pattern.
     * Message Pattern may be a simple string or an array of strings
     * and placeable expressions.
     *
     * @returns {String|Array}
     * @private
     */

  }, {
    key: "getPattern",
    value: function getPattern() {
      // We're going to first try to see if the pattern is simple.
      // If it is we can just look for the end of the line and read the string.
      //
      // Then, if either the line contains a placeable opening `{` or the
      // next line starts an indentation, we switch to complex pattern.
      var start = this._index;
      var eol = this._source.indexOf("\n", this._index);

      if (eol === -1) {
        eol = this._length;
      }

      var firstLineContent = start !== eol ? this._source.slice(start, eol) : null;

      if (firstLineContent && firstLineContent.includes("{")) {
        return this.getComplexPattern();
      }

      this._index = eol + 1;

      this.skipBlankLines();

      if (this._source[this._index] !== " ") {
        // No indentation means we're done with this message. Callers should check
        // if the return value here is null. It may be OK for messages, but not OK
        // for terms, attributes and variants.
        return firstLineContent;
      }

      var lineStart = this._index;

      this.skipInlineWS();

      if (this._source[this._index] === ".") {
        // The pattern is followed by an attribute. Rewind _index to the first
        // column of the current line as expected by getAttributes.
        this._index = lineStart;
        return firstLineContent;
      }

      if (firstLineContent) {
        // It's a multiline pattern which started on the same line as the
        // identifier. Reparse the whole pattern to make sure we get all of it.
        this._index = start;
      }

      return this.getComplexPattern();
    }

    /**
     * Parses a complex Message pattern.
     * This function is called by getPattern when the message is multiline,
     * or contains escape chars or placeables.
     * It does full parsing of complex patterns.
     *
     * @returns {Array}
     * @private
     */
    /* eslint-disable complexity */

  }, {
    key: "getComplexPattern",
    value: function getComplexPattern() {
      var buffer = "";
      var content = [];
      var placeables = 0;

      var ch = this._source[this._index];

      while (this._index < this._length) {
        // This block handles multi-line strings combining strings separated
        // by new line.
        if (ch === "\n") {
          this._index++;

          // We want to capture the start and end pointers
          // around blank lines and add them to the buffer
          // but only if the blank lines are in the middle
          // of the string.
          var blankLinesStart = this._index;
          this.skipBlankLines();
          var blankLinesEnd = this._index;

          if (this._source[this._index] !== " ") {
            break;
          }
          this.skipInlineWS();

          if (this._source[this._index] === "}" || this._source[this._index] === "[" || this._source[this._index] === "*" || this._source[this._index] === ".") {
            this._index = blankLinesEnd;
            break;
          }

          buffer += this._source.substring(blankLinesStart, blankLinesEnd);

          if (buffer.length || content.length) {
            buffer += "\n";
          }
          ch = this._source[this._index];
          continue;
        } else if (ch === "\\") {
          var ch2 = this._source[this._index + 1];
          if (ch2 === '"' || ch2 === "{" || ch2 === "\\") {
            ch = ch2;
            this._index++;
          }
        } else if (ch === "{") {
          // Push the buffer to content array right before placeable
          if (buffer.length) {
            content.push(buffer);
          }
          if (placeables > MAX_PLACEABLES - 1) {
            throw this.error("Too many placeables, maximum allowed is " + MAX_PLACEABLES);
          }
          buffer = "";
          content.push(this.getPlaceable());

          this._index++;

          ch = this._source[this._index];
          placeables++;
          continue;
        }

        if (ch) {
          buffer += ch;
        }
        this._index++;
        ch = this._source[this._index];
      }

      if (content.length === 0) {
        return buffer.length ? buffer : null;
      }

      if (buffer.length) {
        content.push(buffer);
      }

      return content;
    }
    /* eslint-enable complexity */

    /**
     * Parses a single placeable in a Message pattern and returns its
     * expression.
     *
     * @returns {Object}
     * @private
     */

  }, {
    key: "getPlaceable",
    value: function getPlaceable() {
      var start = ++this._index;

      this.skipWS();

      if (this._source[this._index] === "*" || this._source[this._index] === "[" && this._source[this._index + 1] !== "]") {
        var _variants = this.getVariants();

        return {
          type: "sel",
          exp: null,
          vars: _variants[0],
          def: _variants[1]
        };
      }

      // Rewind the index and only support in-line white-space now.
      this._index = start;
      this.skipInlineWS();

      var selector = this.getSelectorExpression();

      this.skipWS();

      var ch = this._source[this._index];

      if (ch === "}") {
        if (selector.type === "attr" && selector.id.name.startsWith("-")) {
          throw this.error("Attributes of private messages cannot be interpolated.");
        }

        return selector;
      }

      if (ch !== "-" || this._source[this._index + 1] !== ">") {
        throw this.error('Expected "}" or "->"');
      }

      if (selector.type === "ref") {
        throw this.error("Message references cannot be used as selectors.");
      }

      if (selector.type === "var") {
        throw this.error("Variants cannot be used as selectors.");
      }

      if (selector.type === "attr" && !selector.id.name.startsWith("-")) {
        throw this.error("Attributes of public messages cannot be used as selectors.");
      }

      this._index += 2; // ->

      this.skipInlineWS();

      if (this._source[this._index] !== "\n") {
        throw this.error("Variants should be listed in a new line");
      }

      this.skipWS();

      var variants = this.getVariants();

      if (variants[0].length === 0) {
        throw this.error("Expected members for the select expression");
      }

      return {
        type: "sel",
        exp: selector,
        vars: variants[0],
        def: variants[1]
      };
    }

    /**
     * Parses a selector expression.
     *
     * @returns {Object}
     * @private
     */

  }, {
    key: "getSelectorExpression",
    value: function getSelectorExpression() {
      var literal = this.getLiteral();

      if (literal.type !== "ref") {
        return literal;
      }

      if (this._source[this._index] === ".") {
        this._index++;

        var name = this.getIdentifier();
        this._index++;
        return {
          type: "attr",
          id: literal,
          name: name
        };
      }

      if (this._source[this._index] === "[") {
        this._index++;

        var key = this.getVariantKey();
        this._index++;
        return {
          type: "var",
          id: literal,
          key: key
        };
      }

      if (this._source[this._index] === "(") {
        this._index++;
        var args = this.getCallArgs();

        if (!functionIdentifierRe.test(literal.name)) {
          throw this.error("Function names must be all upper-case");
        }

        this._index++;

        literal.type = "fun";

        return {
          type: "call",
          fun: literal,
          args: args
        };
      }

      return literal;
    }

    /**
     * Parses call arguments for a CallExpression.
     *
     * @returns {Array}
     * @private
     */

  }, {
    key: "getCallArgs",
    value: function getCallArgs() {
      var args = [];

      while (this._index < this._length) {
        this.skipInlineWS();

        if (this._source[this._index] === ")") {
          return args;
        }

        var exp = this.getSelectorExpression();

        // MessageReference in this place may be an entity reference, like:
        // `call(foo)`, or, if it's followed by `:` it will be a key-value pair.
        if (exp.type !== "ref") {
          args.push(exp);
        } else {
          this.skipInlineWS();

          if (this._source[this._index] === ":") {
            this._index++;
            this.skipInlineWS();

            var val = this.getSelectorExpression();

            // If the expression returned as a value of the argument
            // is not a quote delimited string or number, throw.
            //
            // We don't have to check here if the pattern is quote delimited
            // because that's the only type of string allowed in expressions.
            if (typeof val === "string" || Array.isArray(val) || val.type === "num") {
              args.push({
                type: "narg",
                name: exp.name,
                val: val
              });
            } else {
              this._index = this._source.lastIndexOf(":", this._index) + 1;
              throw this.error("Expected string in quotes, number.");
            }
          } else {
            args.push(exp);
          }
        }

        this.skipInlineWS();

        if (this._source[this._index] === ")") {
          break;
        } else if (this._source[this._index] === ",") {
          this._index++;
        } else {
          throw this.error('Expected "," or ")"');
        }
      }

      return args;
    }

    /**
     * Parses an FTL Number.
     *
     * @returns {Object}
     * @private
     */

  }, {
    key: "getNumber",
    value: function getNumber() {
      var num = "";
      var cc = this._source.charCodeAt(this._index);

      // The number literal may start with negative sign `-`.
      if (cc === 45) {
        num += "-";
        cc = this._source.charCodeAt(++this._index);
      }

      // next, we expect at least one digit
      if (cc < 48 || cc > 57) {
        throw this.error("Unknown literal \"" + num + "\"");
      }

      // followed by potentially more digits
      while (cc >= 48 && cc <= 57) {
        num += this._source[this._index++];
        cc = this._source.charCodeAt(this._index);
      }

      // followed by an optional decimal separator `.`
      if (cc === 46) {
        num += this._source[this._index++];
        cc = this._source.charCodeAt(this._index);

        // followed by at least one digit
        if (cc < 48 || cc > 57) {
          throw this.error("Unknown literal \"" + num + "\"");
        }

        // and optionally more digits
        while (cc >= 48 && cc <= 57) {
          num += this._source[this._index++];
          cc = this._source.charCodeAt(this._index);
        }
      }

      return {
        type: "num",
        val: num
      };
    }

    /**
     * Parses a list of Message attributes.
     *
     * @returns {Object}
     * @private
     */

  }, {
    key: "getAttributes",
    value: function getAttributes() {
      var attrs = {};

      while (this._index < this._length) {
        if (this._source[this._index] !== " ") {
          break;
        }
        this.skipInlineWS();

        if (this._source[this._index] !== ".") {
          break;
        }
        this._index++;

        var key = this.getIdentifier();

        this.skipInlineWS();

        if (this._source[this._index] !== "=") {
          throw this.error('Expected "="');
        }
        this._index++;

        this.skipInlineWS();

        var val = this.getPattern();

        if (val === null) {
          throw this.error("Expected attribute to have a value");
        }

        if (typeof val === "string") {
          attrs[key] = val;
        } else {
          attrs[key] = {
            val: val
          };
        }

        this.skipBlankLines();
      }

      return attrs;
    }

    /**
     * Parses a list of Selector variants.
     *
     * @returns {Array}
     * @private
     */

  }, {
    key: "getVariants",
    value: function getVariants() {
      var variants = [];
      var index = 0;
      var defaultIndex = void 0;

      while (this._index < this._length) {
        var ch = this._source[this._index];

        if ((ch !== "[" || this._source[this._index + 1] === "[") && ch !== "*") {
          break;
        }
        if (ch === "*") {
          this._index++;
          defaultIndex = index;
        }

        if (this._source[this._index] !== "[") {
          throw this.error('Expected "["');
        }

        this._index++;

        var key = this.getVariantKey();

        this.skipInlineWS();

        var val = this.getPattern();

        if (val === null) {
          throw this.error("Expected variant to have a value");
        }

        variants[index++] = { key: key, val: val };

        this.skipWS();
      }

      return [variants, defaultIndex];
    }

    /**
     * Parses a Variant key.
     *
     * @returns {String}
     * @private
     */

  }, {
    key: "getVariantKey",
    value: function getVariantKey() {
      // VariantKey may be a Keyword or Number

      var cc = this._source.charCodeAt(this._index);
      var literal = void 0;

      if (cc >= 48 && cc <= 57 || cc === 45) {
        literal = this.getNumber();
      } else {
        literal = this.getVariantName();
      }

      if (this._source[this._index] !== "]") {
        throw this.error('Expected "]"');
      }

      this._index++;
      return literal;
    }

    /**
     * Parses an FTL literal.
     *
     * @returns {Object}
     * @private
     */

  }, {
    key: "getLiteral",
    value: function getLiteral() {
      var cc0 = this._source.charCodeAt(this._index);

      if (cc0 === 36) {
        // $
        this._index++;
        return {
          type: "ext",
          name: this.getIdentifier()
        };
      }

      var cc1 = cc0 === 45 // -
      // Peek at the next character after the dash.
      ? this._source.charCodeAt(this._index + 1)
      // Or keep using the character at the current index.
      : cc0;

      if (cc1 >= 97 && cc1 <= 122 || // a-z
      cc1 >= 65 && cc1 <= 90) {
        // A-Z
        return {
          type: "ref",
          name: this.getEntryIdentifier()
        };
      }

      if (cc1 >= 48 && cc1 <= 57) {
        // 0-9
        return this.getNumber();
      }

      if (cc0 === 34) {
        // "
        return this.getString();
      }

      throw this.error("Expected literal");
    }

    /**
     * Skips an FTL comment.
     *
     * @private
     */

  }, {
    key: "skipComment",
    value: function skipComment() {
      // At runtime, we don't care about comments so we just have
      // to parse them properly and skip their content.
      var eol = this._source.indexOf("\n", this._index);

      while (eol !== -1 && (this._source[eol + 1] === "/" && this._source[eol + 2] === "/" || this._source[eol + 1] === "#" && [" ", "#"].includes(this._source[eol + 2]))) {
        this._index = eol + 3;

        eol = this._source.indexOf("\n", this._index);

        if (eol === -1) {
          break;
        }
      }

      if (eol === -1) {
        this._index = this._length;
      } else {
        this._index = eol + 1;
      }
    }

    /**
     * Creates a new SyntaxError object with a given message.
     *
     * @param {String} message
     * @returns {Object}
     * @private
     */

  }, {
    key: "error",
    value: function error(message) {
      return new SyntaxError(message);
    }

    /**
     * Skips to the beginning of a next entry after the current position.
     * This is used to mark the boundary of junk entry in case of error,
     * and recover from the returned position.
     *
     * @private
     */

  }, {
    key: "skipToNextEntryStart",
    value: function skipToNextEntryStart() {
      var start = this._index;

      while (true) {
        if (start === 0 || this._source[start - 1] === "\n") {
          var cc = this._source.charCodeAt(start);

          if (cc >= 97 && cc <= 122 || // a-z
          cc >= 65 && cc <= 90 || // A-Z
          cc === 47 || cc === 91) {
            // /[
            this._index = start;
            return;
          }
        }

        start = this._source.indexOf("\n", start);

        if (start === -1) {
          this._index = this._length;
          return;
        }
        start++;
      }
    }
  }]);
  return RuntimeParser;
}();

/**
 * Parses an FTL string using RuntimeParser and returns the generated
 * object with entries and a list of errors.
 *
 * @param {String} string
 * @returns {Array<Object, Array>}
 */


function parse(string) {
  var parser = new RuntimeParser();
  return parser.getResource(string);
}

/* global Intl */

/**
 * The `FluentType` class is the base of Fluent's type system.
 *
 * Fluent types wrap JavaScript values and store additional configuration for
 * them, which can then be used in the `toString` method together with a proper
 * `Intl` formatter.
 */
var FluentType = function () {

  /**
   * Create an `FluentType` instance.
   *
   * @param   {Any}    value - JavaScript value to wrap.
   * @param   {Object} opts  - Configuration.
   * @returns {FluentType}
   */
  function FluentType(value, opts) {
    classCallCheck(this, FluentType);

    this.value = value;
    this.opts = opts;
  }

  /**
   * Unwrap the raw value stored by this `FluentType`.
   *
   * @returns {Any}
   */


  createClass(FluentType, [{
    key: "valueOf",
    value: function valueOf() {
      return this.value;
    }

    /**
     * Format this instance of `FluentType` to a string.
     *
     * Formatted values are suitable for use outside of the `MessageContext`.
     * This method can use `Intl` formatters memoized by the `MessageContext`
     * instance passed as an argument.
     *
     * @param   {MessageContext} [ctx]
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      throw new Error("Subclasses of FluentType must implement toString.");
    }
  }]);
  return FluentType;
}();

var FluentNone = function (_FluentType) {
  inherits(FluentNone, _FluentType);

  function FluentNone() {
    classCallCheck(this, FluentNone);
    return possibleConstructorReturn(this, (FluentNone.__proto__ || Object.getPrototypeOf(FluentNone)).apply(this, arguments));
  }

  createClass(FluentNone, [{
    key: "toString",
    value: function toString() {
      return this.value || "???";
    }
  }]);
  return FluentNone;
}(FluentType);

var FluentNumber = function (_FluentType2) {
  inherits(FluentNumber, _FluentType2);

  function FluentNumber(value, opts) {
    classCallCheck(this, FluentNumber);
    return possibleConstructorReturn(this, (FluentNumber.__proto__ || Object.getPrototypeOf(FluentNumber)).call(this, parseFloat(value), opts));
  }

  createClass(FluentNumber, [{
    key: "toString",
    value: function toString(ctx) {
      try {
        var nf = ctx._memoizeIntlObject(Intl.NumberFormat, this.opts);
        return nf.format(this.value);
      } catch (e) {
        // XXX Report the error.
        return this.value;
      }
    }

    /**
     * Compare the object with another instance of a FluentType.
     *
     * @param   {MessageContext} ctx
     * @param   {FluentType}     other
     * @returns {bool}
     */

  }, {
    key: "match",
    value: function match(ctx, other) {
      if (other instanceof FluentNumber) {
        return this.value === other.value;
      }
      return false;
    }
  }]);
  return FluentNumber;
}(FluentType);

var FluentDateTime = function (_FluentType3) {
  inherits(FluentDateTime, _FluentType3);

  function FluentDateTime(value, opts) {
    classCallCheck(this, FluentDateTime);
    return possibleConstructorReturn(this, (FluentDateTime.__proto__ || Object.getPrototypeOf(FluentDateTime)).call(this, new Date(value), opts));
  }

  createClass(FluentDateTime, [{
    key: "toString",
    value: function toString(ctx) {
      try {
        var dtf = ctx._memoizeIntlObject(Intl.DateTimeFormat, this.opts);
        return dtf.format(this.value);
      } catch (e) {
        // XXX Report the error.
        return this.value;
      }
    }
  }]);
  return FluentDateTime;
}(FluentType);

var FluentSymbol = function (_FluentType4) {
  inherits(FluentSymbol, _FluentType4);

  function FluentSymbol() {
    classCallCheck(this, FluentSymbol);
    return possibleConstructorReturn(this, (FluentSymbol.__proto__ || Object.getPrototypeOf(FluentSymbol)).apply(this, arguments));
  }

  createClass(FluentSymbol, [{
    key: "toString",
    value: function toString() {
      return this.value;
    }

    /**
     * Compare the object with another instance of a FluentType.
     *
     * @param   {MessageContext} ctx
     * @param   {FluentType}     other
     * @returns {bool}
     */

  }, {
    key: "match",
    value: function match(ctx, other) {
      if (other instanceof FluentSymbol) {
        return this.value === other.value;
      } else if (typeof other === "string") {
        return this.value === other;
      } else if (other instanceof FluentNumber) {
        var pr = ctx._memoizeIntlObject(Intl.PluralRules, other.opts);
        return this.value === pr.select(other.value);
      }
      return false;
    }
  }]);
  return FluentSymbol;
}(FluentType);

/**
 * @overview
 *
 * The FTL resolver ships with a number of functions built-in.
 *
 * Each function take two arguments:
 *   - args - an array of positional args
 *   - opts - an object of key-value args
 *
 * Arguments to functions are guaranteed to already be instances of
 * `FluentType`.  Functions must return `FluentType` objects as well.
 */

var builtins = {
  "NUMBER": function NUMBER(_ref, opts) {
    var _ref2 = slicedToArray(_ref, 1),
        arg = _ref2[0];

    return new FluentNumber(arg.valueOf(), merge(arg.opts, opts));
  },
  "DATETIME": function DATETIME(_ref3, opts) {
    var _ref4 = slicedToArray(_ref3, 1),
        arg = _ref4[0];

    return new FluentDateTime(arg.valueOf(), merge(arg.opts, opts));
  }
};

function merge(argopts, opts) {
  return Object.assign({}, argopts, values(opts));
}

function values(opts) {
  var unwrapped = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.entries(opts)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref5 = _step.value;

      var _ref6 = slicedToArray(_ref5, 2);

      var name = _ref6[0];
      var opt = _ref6[1];

      unwrapped[name] = opt.valueOf();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return unwrapped;
}

/**
 * @overview
 *
 * The role of the Fluent resolver is to format a translation object to an
 * instance of `FluentType` or an array of instances.
 *
 * Translations can contain references to other messages or external arguments,
 * conditional logic in form of select expressions, traits which describe their
 * grammatical features, and can use Fluent builtins which make use of the
 * `Intl` formatters to format numbers, dates, lists and more into the
 * context's language.  See the documentation of the Fluent syntax for more
 * information.
 *
 * In case of errors the resolver will try to salvage as much of the
 * translation as possible.  In rare situations where the resolver didn't know
 * how to recover from an error it will return an instance of `FluentNone`.
 *
 * `MessageReference`, `VariantExpression`, `AttributeExpression` and
 * `SelectExpression` resolve to raw Runtime Entries objects and the result of
 * the resolution needs to be passed into `Type` to get their real value.
 * This is useful for composing expressions.  Consider:
 *
 *     brand-name[nominative]
 *
 * which is a `VariantExpression` with properties `id: MessageReference` and
 * `key: Keyword`.  If `MessageReference` was resolved eagerly, it would
 * instantly resolve to the value of the `brand-name` message.  Instead, we
 * want to get the message object and look for its `nominative` variant.
 *
 * All other expressions (except for `FunctionReference` which is only used in
 * `CallExpression`) resolve to an instance of `FluentType`.  The caller should
 * use the `toString` method to convert the instance to a native value.
 *
 *
 * All functions in this file pass around a special object called `env`.
 * This object stores a set of elements used by all resolve functions:
 *
 *  * {MessageContext} ctx
 *      context for which the given resolution is happening
 *  * {Object} args
 *      list of developer provided arguments that can be used
 *  * {Array} errors
 *      list of errors collected while resolving
 *  * {WeakSet} dirty
 *      Set of patterns already encountered during this resolution.
 *      This is used to prevent cyclic resolutions.
 */

// Prevent expansion of too long placeables.
var MAX_PLACEABLE_LENGTH = 2500;

// Unicode bidi isolation characters.
var FSI = "\u2068";
var PDI = "\u2069";

/**
 * Helper for choosing the default value from a set of members.
 *
 * Used in SelectExpressions and Type.
 *
 * @param   {Object} env
 *    Resolver environment object.
 * @param   {Object} members
 *    Hash map of variants from which the default value is to be selected.
 * @param   {Number} def
 *    The index of the default variant.
 * @returns {FluentType}
 * @private
 */
function DefaultMember(env, members, def) {
  if (members[def]) {
    return members[def];
  }

  var errors = env.errors;

  errors.push(new RangeError("No default"));
  return new FluentNone();
}

/**
 * Resolve a reference to another message.
 *
 * @param   {Object} env
 *    Resolver environment object.
 * @param   {Object} id
 *    The identifier of the message to be resolved.
 * @param   {String} id.name
 *    The name of the identifier.
 * @returns {FluentType}
 * @private
 */
function MessageReference(env, _ref) {
  var name = _ref.name;
  var ctx = env.ctx,
      errors = env.errors;

  var message = name.startsWith("-") ? ctx._terms.get(name) : ctx._messages.get(name);

  if (!message) {
    var err = name.startsWith("-") ? new ReferenceError("Unknown term: " + name) : new ReferenceError("Unknown message: " + name);
    errors.push(err);
    return new FluentNone(name);
  }

  return message;
}

/**
 * Resolve a variant expression to the variant object.
 *
 * @param   {Object} env
 *    Resolver environment object.
 * @param   {Object} expr
 *    An expression to be resolved.
 * @param   {Object} expr.id
 *    An Identifier of a message for which the variant is resolved.
 * @param   {Object} expr.id.name
 *    Name a message for which the variant is resolved.
 * @param   {Object} expr.key
 *    Variant key to be resolved.
 * @returns {FluentType}
 * @private
 */
function VariantExpression(env, _ref2) {
  var id = _ref2.id,
      key = _ref2.key;

  var message = MessageReference(env, id);
  if (message instanceof FluentNone) {
    return message;
  }

  var ctx = env.ctx,
      errors = env.errors;

  var keyword = Type(env, key);

  function isVariantList(node) {
    return Array.isArray(node) && node[0].type === "sel" && node[0].exp === null;
  }

  if (isVariantList(message.val)) {
    // Match the specified key against keys of each variant, in order.
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = message.val[0].vars[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var variant = _step.value;

        var variantKey = Type(env, variant.key);
        if (keyword.match(ctx, variantKey)) {
          return variant;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  errors.push(new ReferenceError("Unknown variant: " + keyword.toString(ctx)));
  return Type(env, message);
}

/**
 * Resolve an attribute expression to the attribute object.
 *
 * @param   {Object} env
 *    Resolver environment object.
 * @param   {Object} expr
 *    An expression to be resolved.
 * @param   {String} expr.id
 *    An ID of a message for which the attribute is resolved.
 * @param   {String} expr.name
 *    Name of the attribute to be resolved.
 * @returns {FluentType}
 * @private
 */
function AttributeExpression(env, _ref3) {
  var id = _ref3.id,
      name = _ref3.name;

  var message = MessageReference(env, id);
  if (message instanceof FluentNone) {
    return message;
  }

  if (message.attrs) {
    // Match the specified name against keys of each attribute.
    for (var attrName in message.attrs) {
      if (name === attrName) {
        return message.attrs[name];
      }
    }
  }

  var errors = env.errors;

  errors.push(new ReferenceError("Unknown attribute: " + name));
  return Type(env, message);
}

/**
 * Resolve a select expression to the member object.
 *
 * @param   {Object} env
 *    Resolver environment object.
 * @param   {Object} expr
 *    An expression to be resolved.
 * @param   {String} expr.exp
 *    Selector expression
 * @param   {Array} expr.vars
 *    List of variants for the select expression.
 * @param   {Number} expr.def
 *    Index of the default variant.
 * @returns {FluentType}
 * @private
 */
function SelectExpression(env, _ref4) {
  var exp = _ref4.exp,
      vars = _ref4.vars,
      def = _ref4.def;

  if (exp === null) {
    return DefaultMember(env, vars, def);
  }

  var selector = Type(env, exp);
  if (selector instanceof FluentNone) {
    return DefaultMember(env, vars, def);
  }

  // Match the selector against keys of each variant, in order.
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = vars[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var variant = _step2.value;

      var key = Type(env, variant.key);
      var keyCanMatch = key instanceof FluentNumber || key instanceof FluentSymbol;

      if (!keyCanMatch) {
        continue;
      }

      var ctx = env.ctx;


      if (key.match(ctx, selector)) {
        return variant;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return DefaultMember(env, vars, def);
}

/**
 * Resolve expression to a Fluent type.
 *
 * JavaScript strings are a special case.  Since they natively have the
 * `toString` method they can be used as if they were a Fluent type without
 * paying the cost of creating a instance of one.
 *
 * @param   {Object} env
 *    Resolver environment object.
 * @param   {Object} expr
 *    An expression object to be resolved into a Fluent type.
 * @returns {FluentType}
 * @private
 */
function Type(env, expr) {
  // A fast-path for strings which are the most common case, and for
  // `FluentNone` which doesn't require any additional logic.
  if (typeof expr === "string" || expr instanceof FluentNone) {
    return expr;
  }

  // The Runtime AST (Entries) encodes patterns (complex strings with
  // placeables) as Arrays.
  if (Array.isArray(expr)) {
    return Pattern(env, expr);
  }

  switch (expr.type) {
    case "varname":
      return new FluentSymbol(expr.name);
    case "num":
      return new FluentNumber(expr.val);
    case "ext":
      return ExternalArgument(env, expr);
    case "fun":
      return FunctionReference(env, expr);
    case "call":
      return CallExpression(env, expr);
    case "ref":
      {
        var message = MessageReference(env, expr);
        return Type(env, message);
      }
    case "attr":
      {
        var attr = AttributeExpression(env, expr);
        return Type(env, attr);
      }
    case "var":
      {
        var variant = VariantExpression(env, expr);
        return Type(env, variant);
      }
    case "sel":
      {
        var member = SelectExpression(env, expr);
        return Type(env, member);
      }
    case undefined:
      {
        // If it's a node with a value, resolve the value.
        if (expr.val !== null && expr.val !== undefined) {
          return Type(env, expr.val);
        }

        var errors = env.errors;

        errors.push(new RangeError("No value"));
        return new FluentNone();
      }
    default:
      return new FluentNone();
  }
}

/**
 * Resolve a reference to an external argument.
 *
 * @param   {Object} env
 *    Resolver environment object.
 * @param   {Object} expr
 *    An expression to be resolved.
 * @param   {String} expr.name
 *    Name of an argument to be returned.
 * @returns {FluentType}
 * @private
 */
function ExternalArgument(env, _ref5) {
  var name = _ref5.name;
  var args = env.args,
      errors = env.errors;


  if (!args || !args.hasOwnProperty(name)) {
    errors.push(new ReferenceError("Unknown external: " + name));
    return new FluentNone(name);
  }

  var arg = args[name];

  // Return early if the argument already is an instance of FluentType.
  if (arg instanceof FluentType) {
    return arg;
  }

  // Convert the argument to a Fluent type.
  switch (typeof arg === "undefined" ? "undefined" : _typeof(arg)) {
    case "string":
      return arg;
    case "number":
      return new FluentNumber(arg);
    case "object":
      if (arg instanceof Date) {
        return new FluentDateTime(arg);
      }
    default:
      errors.push(new TypeError("Unsupported external type: " + name + ", " + (typeof arg === "undefined" ? "undefined" : _typeof(arg))));
      return new FluentNone(name);
  }
}

/**
 * Resolve a reference to a function.
 *
 * @param   {Object}  env
 *    Resolver environment object.
 * @param   {Object} expr
 *    An expression to be resolved.
 * @param   {String} expr.name
 *    Name of the function to be returned.
 * @returns {Function}
 * @private
 */
function FunctionReference(env, _ref6) {
  var name = _ref6.name;

  // Some functions are built-in.  Others may be provided by the runtime via
  // the `MessageContext` constructor.
  var _functions = env.ctx._functions,
      errors = env.errors;

  var func = _functions[name] || builtins[name];

  if (!func) {
    errors.push(new ReferenceError("Unknown function: " + name + "()"));
    return new FluentNone(name + "()");
  }

  if (typeof func !== "function") {
    errors.push(new TypeError("Function " + name + "() is not callable"));
    return new FluentNone(name + "()");
  }

  return func;
}

/**
 * Resolve a call to a Function with positional and key-value arguments.
 *
 * @param   {Object} env
 *    Resolver environment object.
 * @param   {Object} expr
 *    An expression to be resolved.
 * @param   {Object} expr.fun
 *    FTL Function object.
 * @param   {Array} expr.args
 *    FTL Function argument list.
 * @returns {FluentType}
 * @private
 */
function CallExpression(env, _ref7) {
  var fun = _ref7.fun,
      args = _ref7.args;

  var callee = FunctionReference(env, fun);

  if (callee instanceof FluentNone) {
    return callee;
  }

  var posargs = [];
  var keyargs = {};

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = args[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var arg = _step3.value;

      if (arg.type === "narg") {
        keyargs[arg.name] = Type(env, arg.val);
      } else {
        posargs.push(Type(env, arg));
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  try {
    return callee(posargs, keyargs);
  } catch (e) {
    // XXX Report errors.
    return new FluentNone();
  }
}

/**
 * Resolve a pattern (a complex string with placeables).
 *
 * @param   {Object} env
 *    Resolver environment object.
 * @param   {Array} ptn
 *    Array of pattern elements.
 * @returns {Array}
 * @private
 */
function Pattern(env, ptn) {
  var ctx = env.ctx,
      dirty = env.dirty,
      errors = env.errors;


  if (dirty.has(ptn)) {
    errors.push(new RangeError("Cyclic reference"));
    return new FluentNone();
  }

  // Tag the pattern as dirty for the purpose of the current resolution.
  dirty.add(ptn);
  var result = [];

  // Wrap interpolations with Directional Isolate Formatting characters
  // only when the pattern has more than one element.
  var useIsolating = ctx._useIsolating && ptn.length > 1;

  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = ptn[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var elem = _step4.value;

      if (typeof elem === "string") {
        result.push(elem);
        continue;
      }

      var part = Type(env, elem).toString(ctx);

      if (useIsolating) {
        result.push(FSI);
      }

      if (part.length > MAX_PLACEABLE_LENGTH) {
        errors.push(new RangeError("Too many characters in placeable " + ("(" + part.length + ", max allowed is " + MAX_PLACEABLE_LENGTH + ")")));
        result.push(part.slice(MAX_PLACEABLE_LENGTH));
      } else {
        result.push(part);
      }

      if (useIsolating) {
        result.push(PDI);
      }
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  dirty.delete(ptn);
  return result.join("");
}

/**
 * Format a translation into a string.
 *
 * @param   {MessageContext} ctx
 *    A MessageContext instance which will be used to resolve the
 *    contextual information of the message.
 * @param   {Object}         args
 *    List of arguments provided by the developer which can be accessed
 *    from the message.
 * @param   {Object}         message
 *    An object with the Message to be resolved.
 * @param   {Array}          errors
 *    An error array that any encountered errors will be appended to.
 * @returns {FluentType}
 */
function resolve(ctx, args, message) {
  var errors = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var env = {
    ctx: ctx, args: args, errors: errors, dirty: new WeakSet()
  };
  return Type(env, message).toString(ctx);
}

/**
 * Message contexts are single-language stores of translations.  They are
 * responsible for parsing translation resources in the Fluent syntax and can
 * format translation units (entities) to strings.
 *
 * Always use `MessageContext.format` to retrieve translation units from
 * a context.  Translations can contain references to other entities or
 * external arguments, conditional logic in form of select expressions, traits
 * which describe their grammatical features, and can use Fluent builtins which
 * make use of the `Intl` formatters to format numbers, dates, lists and more
 * into the context's language.  See the documentation of the Fluent syntax for
 * more information.
 */
var MessageContext = function () {

  /**
   * Create an instance of `MessageContext`.
   *
   * The `locales` argument is used to instantiate `Intl` formatters used by
   * translations.  The `options` object can be used to configure the context.
   *
   * Examples:
   *
   *     const ctx = new MessageContext(locales);
   *
   *     const ctx = new MessageContext(locales, { useIsolating: false });
   *
   *     const ctx = new MessageContext(locales, {
   *       useIsolating: true,
   *       functions: {
   *         NODE_ENV: () => process.env.NODE_ENV
   *       }
   *     });
   *
   * Available options:
   *
   *   - `functions` - an object of additional functions available to
   *                   translations as builtins.
   *
   *   - `useIsolating` - boolean specifying whether to use Unicode isolation
   *                    marks (FSI, PDI) for bidi interpolations.
   *
   * @param   {string|Array<string>} locales - Locale or locales of the context
   * @param   {Object} [options]
   * @returns {MessageContext}
   */
  function MessageContext(locales) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$functions = _ref.functions,
        functions = _ref$functions === undefined ? {} : _ref$functions,
        _ref$useIsolating = _ref.useIsolating,
        useIsolating = _ref$useIsolating === undefined ? true : _ref$useIsolating;

    classCallCheck(this, MessageContext);

    this.locales = Array.isArray(locales) ? locales : [locales];

    this._terms = new Map();
    this._messages = new Map();
    this._functions = functions;
    this._useIsolating = useIsolating;
    this._intls = new WeakMap();
  }

  /*
   * Return an iterator over public `[id, message]` pairs.
   *
   * @returns {Iterator}
   */


  createClass(MessageContext, [{
    key: "hasMessage",


    /*
     * Check if a message is present in the context.
     *
     * @param {string} id - The identifier of the message to check.
     * @returns {bool}
     */
    value: function hasMessage(id) {
      return this._messages.has(id);
    }

    /*
     * Return the internal representation of a message.
     *
     * The internal representation should only be used as an argument to
     * `MessageContext.format`.
     *
     * @param {string} id - The identifier of the message to check.
     * @returns {Any}
     */

  }, {
    key: "getMessage",
    value: function getMessage(id) {
      return this._messages.get(id);
    }

    /**
     * Add a translation resource to the context.
     *
     * The translation resource must use the Fluent syntax.  It will be parsed by
     * the context and each translation unit (message) will be available in the
     * context by its identifier.
     *
     *     ctx.addMessages('foo = Foo');
     *     ctx.getMessage('foo');
     *
     *     // Returns a raw representation of the 'foo' message.
     *
     * Parsed entities should be formatted with the `format` method in case they
     * contain logic (references, select expressions etc.).
     *
     * @param   {string} source - Text resource with translations.
     * @returns {Array<Error>}
     */

  }, {
    key: "addMessages",
    value: function addMessages(source) {
      var _parse = parse(source),
          _parse2 = slicedToArray(_parse, 2),
          entries = _parse2[0],
          errors = _parse2[1];

      for (var id in entries) {
        if (id.startsWith("-")) {
          // Identifiers starting with a dash (-) define terms. Terms are private
          // and cannot be retrieved from MessageContext.
          if (this._terms.has(id)) {
            errors.push("Attempt to override an existing term: \"" + id + "\"");
            continue;
          }
          this._terms.set(id, entries[id]);
        } else {
          if (this._messages.has(id)) {
            errors.push("Attempt to override an existing message: \"" + id + "\"");
            continue;
          }
          this._messages.set(id, entries[id]);
        }
      }

      return errors;
    }

    /**
     * Format a message to a string or null.
     *
     * Format a raw `message` from the context into a string (or a null if it has
     * a null value).  `args` will be used to resolve references to external
     * arguments inside of the translation.
     *
     * In case of errors `format` will try to salvage as much of the translation
     * as possible and will still return a string.  For performance reasons, the
     * encountered errors are not returned but instead are appended to the
     * `errors` array passed as the third argument.
     *
     *     const errors = [];
     *     ctx.addMessages('hello = Hello, { $name }!');
     *     const hello = ctx.getMessage('hello');
     *     ctx.format(hello, { name: 'Jane' }, errors);
     *
     *     // Returns 'Hello, Jane!' and `errors` is empty.
     *
     *     ctx.format(hello, undefined, errors);
     *
     *     // Returns 'Hello, name!' and `errors` is now:
     *
     *     [<ReferenceError: Unknown external: name>]
     *
     * @param   {Object | string}    message
     * @param   {Object | undefined} args
     * @param   {Array}              errors
     * @returns {?string}
     */

  }, {
    key: "format",
    value: function format(message, args, errors) {
      // optimize entities which are simple strings with no attributes
      if (typeof message === "string") {
        return message;
      }

      // optimize simple-string entities with attributes
      if (typeof message.val === "string") {
        return message.val;
      }

      // optimize entities with null values
      if (message.val === undefined) {
        return null;
      }

      return resolve(this, args, message, errors);
    }
  }, {
    key: "_memoizeIntlObject",
    value: function _memoizeIntlObject(ctor, opts) {
      var cache = this._intls.get(ctor) || {};
      var id = JSON.stringify(opts);

      if (!cache[id]) {
        cache[id] = new ctor(this.locales, opts);
        this._intls.set(ctor, cache);
      }

      return cache[id];
    }
  }, {
    key: "messages",
    get: function get$$1() {
      return this._messages[Symbol.iterator]();
    }
  }]);
  return MessageContext;
}();

/*
 * CachedIterable caches the elements yielded by an iterable.
 *
 * It can be used to iterate over an iterable many times without depleting the
 * iterable.
 */
var CachedIterable = function () {
  /**
   * Create an `CachedIterable` instance.
   *
   * @param {Iterable} iterable
   * @returns {CachedIterable}
   */
  function CachedIterable(iterable) {
    classCallCheck(this, CachedIterable);

    if (Symbol.asyncIterator in Object(iterable)) {
      this.iterator = iterable[Symbol.asyncIterator]();
    } else if (Symbol.iterator in Object(iterable)) {
      this.iterator = iterable[Symbol.iterator]();
    } else {
      throw new TypeError("Argument must implement the iteration protocol.");
    }

    this.seen = [];
  }

  createClass(CachedIterable, [{
    key: Symbol.iterator,
    value: function value() {
      var seen = this.seen,
          iterator = this.iterator;

      var cur = 0;

      return {
        next: function next() {
          if (seen.length <= cur) {
            seen.push(iterator.next());
          }
          return seen[cur++];
        }
      };
    }
  }, {
    key: Symbol.asyncIterator,
    value: function value() {
      var seen = this.seen,
          iterator = this.iterator;

      var cur = 0;

      return {
        next: function () {
          var _ref = asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!(seen.length <= cur)) {
                      _context.next = 6;
                      break;
                    }

                    _context.t0 = seen;
                    _context.next = 4;
                    return iterator.next();

                  case 4:
                    _context.t1 = _context.sent;

                    _context.t0.push.call(_context.t0, _context.t1);

                  case 6:
                    return _context.abrupt("return", seen[cur++]);

                  case 7:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function next() {
            return _ref.apply(this, arguments);
          }

          return next;
        }()
      };
    }

    /**
     * This method allows user to consume the next element from the iterator
     * into the cache.
     */

  }, {
    key: "touchNext",
    value: function touchNext() {
      var seen = this.seen,
          iterator = this.iterator;

      if (seen.length === 0 || seen[seen.length - 1].done === false) {
        seen.push(iterator.next());
      }
    }
  }]);
  return CachedIterable;
}();

/*
 * @overview
 *
 * Functions for managing ordered sequences of MessageContexts.
 *
 * An ordered iterable of MessageContext instances can represent the current
 * negotiated fallback chain of languages.  This iterable can be used to find
 * the best existing translation for a given identifier.
 *
 * The mapContext* methods can be used to find the first MessageContext in the
 * given iterable which contains the translation with the given identifier.  If
 * the iterable is ordered according to the result of a language negotiation
 * the returned MessageContext contains the best available translation.
 *
 * A simple function which formats translations based on the identifier might
 * be implemented as follows:
 *
 *     formatString(id, args) {
 *         const ctx = mapContextSync(contexts, id);
 *
 *         if (ctx === null) {
 *             return id;
 *         }
 *
 *         const msg = ctx.getMessage(id);
 *         return ctx.format(msg, args);
 *     }
 *
 * In order to pass an iterator to mapContext*, wrap it in CachedIterable.
 * This allows multiple calls to mapContext* without advancing and eventually
 * depleting the iterator.
 *
 *     function *generateMessages() {
 *         // Some lazy logic for yielding MessageContexts.
 *         yield *[ctx1, ctx2];
 *     }
 *
 *     const contexts = new CachedIterable(generateMessages());
 *     const ctx = mapContextSync(contexts, id);
 *
 */

/*
 * Synchronously map an identifier or an array of identifiers to the best
 * `MessageContext` instance(s).
 *
 * @param {Iterable} iterable
 * @param {string|Array<string>} ids
 * @returns {MessageContext|Array<MessageContext>}
 */
function mapContextSync(iterable, ids) {
  if (!Array.isArray(ids)) {
    return getContextForId(iterable, ids);
  }

  return ids.map(function (id) {
    return getContextForId(iterable, id);
  });
}

/*
 * Find the best `MessageContext` with the translation for `id`.
 */
function getContextForId(iterable, id) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var context = _step.value;

      if (context.hasMessage(id)) {
        return context;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
}

/*
 * Asynchronously map an identifier or an array of identifiers to the best
 * `MessageContext` instance(s).
 *
 * @param {AsyncIterable} iterable
 * @param {string|Array<string>} ids
 * @returns {Promise<MessageContext|Array<MessageContext>>}
 */
var mapContextAsync = function () {
  var _ref = asyncToGenerator(regeneratorRuntime.mark(function _callee(iterable, ids) {
    var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value, context, remainingCount, foundContexts, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value2, _context, index, id;

    return regeneratorRuntime.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (Array.isArray(ids)) {
              _context2.next = 36;
              break;
            }

            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context2.prev = 4;
            _iterator2 = asyncIterator(iterable);

          case 6:
            _context2.next = 8;
            return _iterator2.next();

          case 8:
            _step2 = _context2.sent;
            _iteratorNormalCompletion2 = _step2.done;
            _context2.next = 12;
            return _step2.value;

          case 12:
            _value = _context2.sent;

            if (_iteratorNormalCompletion2) {
              _context2.next = 20;
              break;
            }

            context = _value;

            if (!context.hasMessage(ids)) {
              _context2.next = 17;
              break;
            }

            return _context2.abrupt("return", context);

          case 17:
            _iteratorNormalCompletion2 = true;
            _context2.next = 6;
            break;

          case 20:
            _context2.next = 26;
            break;

          case 22:
            _context2.prev = 22;
            _context2.t0 = _context2["catch"](4);
            _didIteratorError2 = true;
            _iteratorError2 = _context2.t0;

          case 26:
            _context2.prev = 26;
            _context2.prev = 27;

            if (!(!_iteratorNormalCompletion2 && _iterator2.return)) {
              _context2.next = 31;
              break;
            }

            _context2.next = 31;
            return _iterator2.return();

          case 31:
            _context2.prev = 31;

            if (!_didIteratorError2) {
              _context2.next = 34;
              break;
            }

            throw _iteratorError2;

          case 34:
            return _context2.finish(31);

          case 35:
            return _context2.finish(26);

          case 36:
            remainingCount = ids.length;
            foundContexts = new Array(remainingCount).fill(null);
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            _context2.prev = 41;
            _iterator3 = asyncIterator(iterable);

          case 43:
            _context2.next = 45;
            return _iterator3.next();

          case 45:
            _step3 = _context2.sent;
            _iteratorNormalCompletion3 = _step3.done;
            _context2.next = 49;
            return _step3.value;

          case 49:
            _value2 = _context2.sent;

            if (_iteratorNormalCompletion3) {
              _context2.next = 64;
              break;
            }

            _context = _value2;
            index = 0;

          case 53:
            if (!(index < ids.length)) {
              _context2.next = 61;
              break;
            }

            id = ids[index];

            if (!foundContexts[index] && _context.hasMessage(id)) {
              foundContexts[index] = _context;
              remainingCount--;
            }

            // Return early when all ids have been mapped to contexts.

            if (!(remainingCount === 0)) {
              _context2.next = 58;
              break;
            }

            return _context2.abrupt("return", foundContexts);

          case 58:
            index++;
            _context2.next = 53;
            break;

          case 61:
            _iteratorNormalCompletion3 = true;
            _context2.next = 43;
            break;

          case 64:
            _context2.next = 70;
            break;

          case 66:
            _context2.prev = 66;
            _context2.t1 = _context2["catch"](41);
            _didIteratorError3 = true;
            _iteratorError3 = _context2.t1;

          case 70:
            _context2.prev = 70;
            _context2.prev = 71;

            if (!(!_iteratorNormalCompletion3 && _iterator3.return)) {
              _context2.next = 75;
              break;
            }

            _context2.next = 75;
            return _iterator3.return();

          case 75:
            _context2.prev = 75;

            if (!_didIteratorError3) {
              _context2.next = 78;
              break;
            }

            throw _iteratorError3;

          case 78:
            return _context2.finish(75);

          case 79:
            return _context2.finish(70);

          case 80:
            return _context2.abrupt("return", foundContexts);

          case 81:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, this, [[4, 22, 26, 36], [27,, 31, 35], [41, 66, 70, 80], [71,, 75, 79]]);
  }));

  return function mapContextAsync(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

function nonBlank(line) {
  return !/^\s*$/.test(line);
}

function countIndent(line) {
  var _line$match = line.match(/^\s*/),
      _line$match2 = slicedToArray(_line$match, 1),
      indent = _line$match2[0];

  return indent.length;
}

/**
 * Template literal tag for dedenting FTL code.
 *
 * Strip the common indent of non-blank lines. Remove blank lines.
 *
 * @param {Array<string>} strings
 */
function ftl(strings) {
  var _strings = slicedToArray(strings, 1),
      code = _strings[0];

  var lines = code.split("\n").filter(nonBlank);
  var indents = lines.map(countIndent);
  var common = Math.min.apply(Math, toConsumableArray(indents));
  var indent = new RegExp("^\\s{" + common + "}");

  return lines.map(function (line) {
    return line.replace(indent, "");
  }).join("\n");
}

/*
 * @module fluent
 * @overview
 *
 * `fluent` is a JavaScript implementation of Project Fluent, a localization
 * framework designed to unleash the expressive power of the natural language.
 *
 */

exports._parse = parse;
exports.MessageContext = MessageContext;
exports.MessageArgument = FluentType;
exports.MessageNumberArgument = FluentNumber;
exports.MessageDateTimeArgument = FluentDateTime;
exports.CachedIterable = CachedIterable;
exports.mapContextSync = mapContextSync;
exports.mapContextAsync = mapContextAsync;
exports.ftl = ftl;

Object.defineProperty(exports, '__esModule', { value: true });

})));
