// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#ifndef mozilla_dom_NimbusClient
#define mozilla_dom_NimbusClient

#include "jsapi.h"
#include "nsCOMPtr.h"
#include "nsIGlobalObject.h"
#include "nsWrapperCache.h"
#include "nsISerialEventTarget.h"

#include "mozilla/RefPtr.h"

#include "mozilla/dom/NimbusBinding.h"

namespace mozilla {
namespace dom {

class NimbusClient final : public nsISupports, public nsWrapperCache {
 public:
  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(NimbusClient)

  NimbusClient(nsIGlobalObject* aGlobal, uint64_t aHandle);

  JSObject* WrapObject(JSContext* aCx,
                       JS::Handle<JSObject*> aGivenProto) override;

  nsIGlobalObject* GetParentObject() const { return mGlobal; }

  static already_AddRefed<NimbusClient> Constructor(
      GlobalObject& aGlobal, const AppContext& app_ctx, const nsAString& dbpath,
      const RemoteSettingsConfig& remote_settings_config,
      const AvailableRandomizationUnits& available_randomization_units,
      ErrorResult& aRv);

  void GetExperimentBranch(const nsAString& experiment_slug, nsAString& aRetVal,
                           ErrorResult& aRv);


  void GetActiveExperiments(nsTArray<EnrolledExperiment>& aRetVal,
                            ErrorResult& aRv);

  bool GetGlobalUserParticipation(ErrorResult& aRv);

  void SetGlobalUserParticipation(bool opt_in, ErrorResult& aRv);

  already_AddRefed<Promise> GetActiveExperimentsAsync(ErrorResult& aRv);

  void UpdateExperiments(ErrorResult& aRv);

  void OptInWithBranch(const nsAString& experiment_slug,
                       const nsAString& branch, ErrorResult& aRv);

  void OptOut(const nsAString& experiment_slug, ErrorResult& aRv);

  void ResetEnrollment(const nsAString& experiment_slug, ErrorResult& aRv);

 private:
  ~NimbusClient();

  nsCOMPtr<nsIGlobalObject> mGlobal;
  RefPtr<nsISerialEventTarget> GetBackgroundTarget();
  RefPtr<nsISerialEventTarget> mBackgroundET;
  uint64_t mHandle;
};

}  // namespace dom
}  // namespace mozilla

#endif  // mozilla_dom_NimbusClient
